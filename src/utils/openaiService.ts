import { toast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';

interface ImproveDescriptionResponse {
  improvedText?: string;
  error?: string;
}

/**
 * Melhora o descritivo t√©cnico usando Edge Function do Supabase
 */
export async function improveServiceDescription(currentText: string): Promise<string> {
  if (!currentText.trim()) {
    throw new Error('Texto n√£o pode estar vazio');
  }

  try {
    const { data, error } = await supabase.functions.invoke('improve-description', {
      body: { currentText }
    });

    if (error) {
      console.error('Erro ao chamar edge function:', error);
      throw new Error(`Erro do servi√ßo: ${error.message}`);
    }

    if (data?.error) {
      throw new Error(data.error);
    }

    if (!data?.improvedText) {
      throw new Error('Resposta inv√°lida do servi√ßo de IA');
    }
    return data.improvedText;

  } catch (error) {
    console.error('Erro ao conectar com o servi√ßo de IA:', error);

    if (error instanceof Error) {
      throw error;
    } else {
      throw new Error('Erro inesperado ao conectar com o servi√ßo de IA');
    }
  }
}

/**
 * Hook para usar o servi√ßo de melhoria de descritivo com toast
 */
export function useServiceDescriptionImprovement() {
  const improveWithToast = async (currentText: string): Promise<string> => {
    try {
      toast({
        title: "ü§ñ Processando com IA...",
        description: "Analisando e melhorando o descritivo t√©cnico.",
      });

      const improvedText = await improveServiceDescription(currentText);

      toast({
        title: "‚úÖ Descritivo melhorado!",
        description: "O texto foi aprimorado com terminologia t√©cnica mais precisa.",
      });

      return improvedText;

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';

      toast({
        title: "‚ùå Erro ao melhorar descritivo",
        description: errorMessage,
        variant: "destructive",
      });

      throw error;
    }
  };

  return { improveWithToast };
}

/**
 * Gera an√°lise de per√≠cia t√©cnica profissional para FTC Cliente
 * USANDO DADOS REAIS DA FICHA
 */
export async function gerarAnalisePericia(
  ficha: any, // FichaSalva completa
  materiais: any[] // Lista de materiais
): Promise<string> {
  if (!ficha?.formData?.nome_peca || !ficha?.formData?.servico) {
    throw new Error('Nome da pe√ßa e servi√ßo s√£o obrigat√≥rios');
  }

  try {
    // Extrair dados REAIS da ficha
    const { formData } = ficha;

    // Processos de fabrica√ß√£o REAIS (horas > 0)
    const processos: string[] = [];
    if (parseFloat(formData.torno_cnc || 0) > 0) processos.push(`Torno CNC (${formData.torno_cnc}h)`);
    if (parseFloat(formData.torno_grande || 0) > 0) processos.push(`Torno Grande (${formData.torno_grande}h)`);
    if (parseFloat(formData.centro_usinagem || 0) > 0) processos.push(`Centro de Usinagem (${formData.centro_usinagem}h)`);
    if (parseFloat(formData.fresa || 0) > 0) processos.push(`Fresa (${formData.fresa}h)`);
    if (parseFloat(formData.furadeira || 0) > 0) processos.push(`Furadeira (${formData.furadeira}h)`);
    if (parseFloat(formData.plasma_oxicorte || 0) > 0) processos.push(`Plasma/Oxicorte (${formData.plasma_oxicorte}h)`);
    if (parseFloat(formData.solda || 0) > 0) processos.push(`Solda (${formData.solda}h)`);
    if (parseFloat(formData.dobra || 0) > 0) processos.push(`Dobra (${formData.dobra}h)`);
    if (parseFloat(formData.calandra || 0) > 0) processos.push(`Calandra (${formData.calandra}h)`);
    if (parseFloat(formData.caldeiraria || 0) > 0) processos.push(`Caldeiraria (${formData.caldeiraria}h)`);
    if (parseFloat(formData.mandrilhamento || 0) > 0) processos.push(`Mandrilhamento (${formData.mandrilhamento}h)`);
    if (parseFloat(formData.balanceamento || 0) > 0) processos.push(`Balanceamento (${formData.balanceamento}h)`);

    // Tratamentos e acabamentos REAIS
    const tratamentos: string[] = [];
    if (formData.pintura === 'SIM') tratamentos.push(`Pintura ${formData.cor_pintura || 'especificada'}`);
    if (formData.galvanizacao === 'SIM') tratamentos.push(`Galvaniza√ß√£o (${formData.peso_peca_galv || '?'}kg)`);
    if (formData.tratamento_termico === 'SIM') {
      if (formData.tempera_reven) tratamentos.push(`T√™mpera/Revenimento`);
      if (formData.cementacao) tratamentos.push(`Cementa√ß√£o`);
      if (formData.dureza) tratamentos.push(`Dureza ${formData.dureza}`);
    }
    if (formData.teste_lp === 'SIM') tratamentos.push('Teste de L√≠quido Penetrante');
    if (formData.balanceamento_campo === 'SIM') tratamentos.push(`Balanceamento em campo (${formData.rotacao || '?'} RPM)`);

    // Materiais REAIS da cota√ß√£o
    const materiaisTexto = materiais.length > 0
      ? materiais.map(m => `${m.descricao} (${m.quantidade} ${m.unidade})`).join(', ')
      : 'Materiais conforme especifica√ß√£o t√©cnica';

    // Servi√ßos terceirizados REAIS
    const terceirizados = formData.servicos_terceirizados?.trim() || '';

    // üì∏ Buscar fotos da ficha para an√°lise visual
    const fotoUrls: string[] = [];
    if (ficha.fotos && ficha.fotos.length > 0) {
      // Pegar at√© 4 fotos (limite para n√£o estourar tokens)
      const fotosParaAnalise = ficha.fotos.slice(0, 4);

      for (const foto of fotosParaAnalise) {
        if (foto.storagePath) {
          try {
            // Gerar signed URL para a foto
            const { data: urlData } = await supabase.storage
              .from('ficha-fotos')
              .createSignedUrl(foto.storagePath, 3600); // 1 hora

            if (urlData?.signedUrl) {
              fotoUrls.push(urlData.signedUrl);
            }
          } catch (error) {
            console.error('Erro ao gerar URL da foto:', error);
          }
        } else if (foto.preview) {
          // Foto local ainda n√£o salva
          fotoUrls.push(foto.preview);
        }
      }
    }

    console.log(`üì∏ An√°lise de per√≠cia com ${fotoUrls.length} foto(s)`);

    const prompt = `Voc√™ √© um engenheiro mec√¢nico especializado da HMC Usinagem.

Analise os DADOS REAIS desta ficha t√©cnica e gere uma an√°lise profissional:

**DADOS DA PE√áA:**
- Nome: ${formData.nome_peca}
- Quantidade: ${formData.quantidade}
- Servi√ßo: ${formData.servico}
- Cliente: ${formData.cliente || 'N√£o especificado'}

**PROCESSOS DE FABRICA√á√ÉO CONFIRMADOS:**
${processos.length > 0 ? processos.join(', ') : 'Conforme especifica√ß√£o t√©cnica'}

**MATERIAIS COTADOS:**
${materiaisTexto}

**TRATAMENTOS E ACABAMENTOS:**
${tratamentos.length > 0 ? tratamentos.join(', ') : 'Conforme especifica√ß√£o'}

**SERVI√áOS TERCEIRIZADOS:**
${terceirizados || 'N√£o h√° servi√ßos terceirizados'}

**OBSERVA√á√ïES ADICIONAIS:**
${formData.observacoes_adicionais?.trim() || 'Nenhuma observa√ß√£o adicional'}

**INSTRU√á√ïES:**
Gere uma an√°lise t√©cnica profissional usando APENAS os dados acima. N√ÉO INVENTE informa√ß√µes que n√£o est√£o documentadas.

Formato:
## An√°lise de Peritagem
(1-2 par√°grafos descrevendo a pe√ßa e sua aplica√ß√£o)

## Escopo T√©cnico
- **Processos de Fabrica√ß√£o**: (Liste APENAS os processos confirmados acima)
- **Materiais**: (Liste APENAS os materiais cotados acima)
- **Tratamentos e Acabamentos**: (Liste APENAS os tratamentos confirmados acima)
- **Considera√ß√µes T√©cnicas**: (Observa√ß√µes importantes baseadas nos dados reais)

Seja t√©cnico, objetivo e mencione APENAS o que est√° documentado.

${fotoUrls.length > 0 ? `\n**ATEN√á√ÉO**: H√° ${fotoUrls.length} foto(s) anexada(s). Analise as imagens para identificar caracter√≠sticas visuais da pe√ßa e incorpore essas informa√ß√µes na an√°lise.` : ''}`;

    const { data, error } = await supabase.functions.invoke('improve-description', {
      body: {
        currentText: prompt,
        imageUrls: fotoUrls.length > 0 ? fotoUrls : undefined
      }
    });

    if (error) {
      console.error('Erro ao gerar an√°lise de per√≠cia:', error);
      throw new Error(`Erro do servi√ßo de IA: ${error.message}`);
    }

    if (data?.error) {
      throw new Error(data.error);
    }

    if (!data?.improvedText) {
      throw new Error('Resposta inv√°lida do servi√ßo de IA para an√°lise de per√≠cia');
    }

    return data.improvedText;

  } catch (error) {
    console.error('Erro ao gerar an√°lise de per√≠cia:', error);

    if (error instanceof Error) {
      throw error;
    } else {
      throw new Error('Erro inesperado ao gerar an√°lise de per√≠cia');
    }
  }
}